#N canvas 50 50 1400 1000 bjorklund-complete;

// ========== INPUTS ==========
#X obj 50 30 inlet;
#X text 50 10 pulses;
#X obj 150 30 inlet;
#X text 150 10 steps;
#X obj 250 30 inlet;
#X text 250 10 bang;

// ========== STORAGE ==========
#X obj 50 60 f;
#X obj 150 60 f;
#X obj 250 60 trigger b b b;

// ========== INITIALIZATION ==========
// Calculate rests = steps - pulses
#X obj 50 100 trigger f f;
#X obj 150 100 -;
#X obj 200 100 f;

// Initialize arrays for division process
#X obj 50 150 table counts 32;
#X obj 150 150 table remainders 32;
#X obj 250 150 f;
#X text 250 130 level;

// Set initial values
#X msg 50 180 0;
#X obj 50 210 tabwrite remainders;
#X obj 150 180 trigger f f;
#X obj 150 210 0;
#X obj 150 240 tabwrite remainders;

// ========== DIVISION LOOP ==========
#X obj 50 300 until;
#X obj 50 330 trigger f f f f f;

// Read current remainder
#X obj 100 360 f;
#X obj 100 390 tabread remainders;

// Calculate division and modulo
#X obj 200 360 trigger f f f;
#X obj 200 390 /;
#X obj 200 420 int;
#X obj 300 390 %;

// Store results
#X obj 200 450 trigger f f;
#X obj 200 480 f;
#X obj 200 510 tabwrite counts;
#X obj 300 420 trigger f f;
#X obj 350 450 + 1;
#X obj 300 480 tabwrite remainders;

// Update level and divisor
#X obj 400 360 trigger f f;
#X obj 400 390 f;
#X obj 450 390 + 1;
#X obj 400 420 f;

// Check termination condition
#X obj 300 550 trigger f f;
#X obj 300 580 tabread remainders;
#X obj 300 610 <= 1;
#X obj 300 640 select 1 0;

// ========== PATTERN BUILDING ==========
// Build pattern using recursive logic simulation
#X obj 50 700 f;
#X text 50 680 final_level;
#X obj 50 730 trigger f;
#X obj 50 760 build-controller;

// Build controller subpatch equivalent
#N canvas 0 0 800 600 build-controller;
#X obj 50 50 inlet;
#X obj 50 80 f;
#X text 50 60 current_level;

// Base cases
#X obj 50 120 select -1 -2;
#X msg 80 150 0;
#X msg 120 150 1;
#X obj 50 180 list;

// Recursive case
#X obj 200 120 trigger f f;
#X obj 200 150 f;
#X obj 200 180 tabread counts;
#X obj 200 210 until;

// First loop (counts[level] times)
#X obj 200 240 trigger f;
#X obj 200 270 - 1;
#X obj 200 300 build-recursive-call;

// Check remainder condition
#X obj 300 150 f;
#X obj 300 180 tabread remainders;
#X obj 300 210 != 0;
#X obj 300 240 select 1;
#X obj 300 270 trigger f;
#X obj 300 300 - 2;
#X obj 300 330 build-recursive-call;

#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 1 0 7 0;
#X connect 1 0 14 0;
#X connect 2 0 3 0;
#X connect 2 1 4 0;
#X connect 3 0 5 0;
#X connect 4 0 5 0;
#X connect 7 0 8 0;
#X connect 8 0 9 0;
#X connect 9 0 10 0;
#X connect 10 0 11 0;
#X connect 11 0 12 0;
#X connect 12 0 13 0;
#X connect 14 0 15 0;
#X connect 15 0 16 0;
#X connect 16 0 17 0;
#X connect 17 0 18 0;
#X connect 18 0 19 0;
#X connect 19 0 20 0;
#X restore 50 760 pd;

// ========== PATTERN STORAGE ==========
#X obj 50 800 list;
#X text 50 780 pattern_accumulator;

// ========== ROTATION LOGIC ==========
// Reverse pattern
#X obj 50 850 list;
#X obj 50 880 list-reverse;

// Find first 1 and rotate
#X obj 50 920 list;
#X obj 50 950 find-first-one;
#X obj 50 980 rotate-list;

// ========== OUTPUT ==========
#X obj 50 1020 outlet;

// ========== CONNECTIONS ==========
#X connect 0 0 6 0;
#X connect 1 0 7 0;
#X connect 2 0 8 0;
#X connect 6 0 9 0;
#X connect 7 0 9 1;
#X connect 8 0 10 0;
#X connect 8 1 11 0;
#X connect 8 2 20 0;
#X connect 9 0 11 1;
#X connect 9 1 16 0;
#X connect 10 0 11 0;
#X connect 11 0 12 0;
#X connect 16 0 17 0;
#X connect 17 0 18 0;
#X connect 18 0 19 0;
#X connect 20 0 21 0;
#X connect 21 0 22 0;
#X connect 22 0 23 0;
#X connect 23 0 24 0;
#X connect 24 0 25 0;
#X connect 25 0 26 0;
#X connect 26 0 27 0;
#X connect 27 0 28 0;
#X connect 28 0 29 0;
#X connect 29 0 30 0;
#X connect 30 0 31 0;
#X connect 31 0 32 0;
#X connect 32 0 33 0;
#X connect 33 0 34 0;
#X connect 34 0 35 0;
#X connect 35 0 36 0;
#X connect 36 0 37 0;
#X connect 37 0 38 0;
#X connect 38 0 39 0;
#X connect 39 0 40 0;
#X connect 40 0 41 0;
#X connect 41 0 42 0;
#X connect 42 0 43 0;
#X connect 43 0 44 0;
#X connect 44 0 45 0;
#X connect 45 0 46 0;
#X connect 46 0 47 0;
#X connect 47 0 48 0;
#X connect 48 0 49 0;
#X connect 49 0 50 0;
#X connect 50 0 51 0;
#X connect 51 0 52 0;
#X connect 52 0 53 0;
#X connect 53 0 54 0;
#X connect 54 0 55 0;
#X connect 55 0 56 0;

// ========== HELPER OBJECTS ==========

// List reverse implementation
#N canvas 0 0 400 300 list-reverse;
#X obj 50 50 inlet;
#X obj 50 80 list;
#X obj 50 110 list-drip;
#X obj 50 140 list prepend;
#X obj 50 170 list;
#X obj 50 200 outlet;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X restore 50 880 pd;

// Find first one implementation
#N canvas 0 0 400 300 find-first-one;
#X obj 50 50 inlet;
#X obj 50 80 list-drip;
#X obj 50 110 route 1;
#X obj 50 140 counter;
#X obj 50 170 outlet;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X restore 50 950 pd;

// Rotate list implementation
#N canvas 0 0 400 300 rotate-list;
#X obj 50 50 inlet;
#X obj 100 50 inlet;
#X obj 50 80 list split;
#X obj 50 110 list;
#X obj 100 110 list prepend;
#X obj 50 140 outlet;
#X connect 0 0 2 0;
#X connect 1 0 2 1;
#X connect 2 0 3 0;
#X connect 2 1 4 0;
#X connect 3 0 5 0;
#X connect 4 0 3 1;
#X restore 50 980 pd;

// Build recursive call simulation
#N canvas 0 0 600 400 build-recursive-call;
#X obj 50 50 inlet;
#X obj 50 80 select -1 -2;
#X msg 80 110 0;
#X msg 120 110 1;
#X obj 50 140 f;
#X obj 50 170 tabread counts;
#X obj 50 200 until;
#X obj 50 230 trigger f;
#X obj 50 260 - 1;
#X obj 50 290 outlet;
#X connect 0 0 1 0;
#X connect 0 0 4 0;
#X connect 1 0 2 0;
#X connect 1 1 3 0;
#X connect 2 0 9 0;
#X connect 3 0 9 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 8 0 9 0;
#X restore 200 300 pd;