#N canvas 0 25 1055 561 12;
#N canvas 23 323 966 509 waveforms 0;
#X obj 24 95 osc~;
#X obj 220 91 phasor~;
#X obj 222 315 tabwrite~ waveform;
#X obj 124 296 metro 100;
#X obj 124 274 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X floatatom 220 53 5 0 0 0 - - - 0;
#X obj 756 109 expr~ if ($v1 < 0.5 \, 1 \, -1);
#X obj 325 137 expr~ (if ($v1 < 0.5 \, $v1 \, 1 - $v1 )) * 2;
#X obj 25 144 *~;
#X obj 57 117 == 0;
#X obj 71 93 r radio;
#X obj 360 174 r radio;
#X obj 333 223 *~;
#X obj 766 185 r radio;
#X obj 739 234 *~;
#X obj 359 197 == 2;
#X obj 765 208 == 3;
#X obj 225 148 r radio;
#X obj 198 197 *~;
#X obj 224 171 == 1;
#X obj 31 276 loadbang;
#X obj 210 26 r freq;
#X obj 739 280 throw~ audio;
#X obj 330 252 throw~ audio;
#X obj 217 227 throw~ audio;
#X obj 26 180 throw~ audio;
#X msg 23 385 \; pd dsp 1;
#X connect 0 0 8 0;
#X connect 1 0 6 0;
#X connect 1 0 7 0;
#X connect 1 0 18 0;
#X connect 3 0 2 0;
#X connect 4 0 3 0;
#X connect 5 0 1 0;
#X connect 5 0 0 0;
#X connect 6 0 14 0;
#X connect 7 0 12 0;
#X connect 8 0 2 0;
#X connect 8 0 25 0;
#X connect 9 0 8 1;
#X connect 10 0 9 0;
#X connect 11 0 15 0;
#X connect 12 0 2 0;
#X connect 12 0 23 0;
#X connect 13 0 16 0;
#X connect 14 0 2 0;
#X connect 14 0 22 0;
#X connect 15 0 12 1;
#X connect 16 0 14 1;
#X connect 17 0 19 0;
#X connect 18 0 2 0;
#X connect 18 0 24 0;
#X connect 19 0 18 1;
#X connect 20 0 3 0;
#X connect 20 0 26 0;
#X connect 21 0 5 0;
#X restore 496 514 pd waveforms;
#X obj 36 406 phasor~;
#X obj 36 436 cos~;
#X obj 36 486 tabwrite~ sine;
#X obj 101 449 metro 100;
#X obj 101 429 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X floatatom 36 377 5 0 0 0 - - - 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array sine 100 float 3;
#A 0 0.0208237 -0.041424 -0.103511 -0.165197 -0.226243 -0.286412 -0.345472 -0.403194 -0.459354 -0.513735 -0.566122 -0.616313 -0.664115 -0.709344 -0.751825 -0.791392 -0.827893 -0.861186 -0.891143 -0.917647 -0.940596 -0.9599 -0.975486 -0.987292 -0.995262 -0.999376 -0.999618 -0.995986 -0.988496 -0.977176 -0.962069 -0.943235 -0.920747 -0.894691 -0.865168 -0.832293 -0.796193 -0.757005 -0.714879 -0.669983 -0.622492 -0.572589 -0.520467 -0.46633 -0.410386 -0.352851 -0.293949 -0.233908 -0.172961 -0.111343 -0.0492922 0.0129493 0.0751405 0.13704 0.198408 0.259007 0.318602 0.376963 0.433863 0.489082 0.542407 0.59363 0.642553 0.688987 0.732751 0.773669 0.811589 0.846365 0.877861 0.905955 0.930539 0.951518 0.96881 0.982349 0.992081 0.99797 0.999992 0.99814 0.992415 0.982841 0.969458 0.952319 0.93149 0.907053 0.879101 0.847744 0.813101 0.775308 0.734511 0.690868 0.644548 0.595731 0.544598 0.491356 0.43621 0.379375 0.32107 0.261521 0.200959 0.139618;
#X coords 0 1 100 -1 200 140 1;
#X restore 195 375 graph;
#X obj 522 281 phasor~;
#X obj 567 374 metro 100;
#X obj 567 355 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X floatatom 522 252 5 0 0 0 - - - 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array sine-expr 100 float 3;
#A 0 -0.191013 -0.26067 -0.328995 -0.395638 -0.460257 -0.522523 -0.582118 -0.638735 -0.692087 -0.7419 -0.787919 -0.829909 -0.867656 -0.900966 -0.929669 -0.953619 -0.972692 -0.986791 -0.995845 -0.999807 -0.998656 -0.992399 -0.981067 -0.964719 -0.943438 -0.917332 -0.886536 -0.851207 -0.811526 -0.767694 -0.719938 -0.6685 -0.613644 -0.55565 -0.494815 -0.431449 -0.365878 -0.298435 -0.229467 -0.159325 -0.0883684 -0.0169603 0.0545346 0.125751 0.196324 0.265894 0.334103 0.400604 0.465057 0.527132 0.586511 0.642892 0.695985 0.745519 0.791241 0.832918 0.870335 0.903302 0.93165 0.955234 0.973934 0.987654 0.996323 0.999898 0.998361 0.991718 0.980004 0.963279 0.941629 0.915163 0.884019 0.848353 0.80835 0.764214 0.71617 0.664464 0.60936 0.55114 0.490102 0.426559 0.360834 0.293264 0.224194 0.153978 0.0829745 0.0115469 -0.0599397 -0.13112 -0.20163 -0.271108 -0.339201 -0.405559 -0.469843 -0.531725 -0.590888 -0.647029 -0.699862 -0.749116 -0.79454 -0.835901;
#X coords 0 1 100 -1 200 140 1 0 0;
#X restore 680 283 graph;
#X obj 522 394 tabwrite~ sine-expr;
#X obj 941 449 pi;
#X obj 941 427 loadbang;
#X obj 941 473 * 2;
#X obj 941 523 value twopi;
#X obj 522 311 expr~ cos ($v1*twopi);
#X obj 920 435 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X floatatom 941 500 5 0 0 0 - - - 0;
#X text 16 36 Esta es una sección sobre cómo hacer osciladores en Pure Data (Pd) basados en el objeto [phasor ~]. El único objeto oscilador que Pd tiene realmente es [osc ~] \, que es un oscilador de onda sinusoidal. El resto de incluso las formas de onda del oscilador estándar que necesita para hacerlas usted mismo. Incluso [osc ~] es en realidad un [fasor ~] conectado a [cos ~] y con bastante frecuencia se usa de esta manera. Primero construiremos los cuatro osciladores básicos (onda sinusoidal \, triángulo \, diente de sierra y onda cuadrada) y luego avanzaremos para crear osciladores personalizados que pueden cambiar sus formas a tiempo.;
#X text 14 213 Como se mencionó anteriormente \, el objeto [osc ~] es esencialmente un [fasor ~] conectado a [cos ~]. El [fasor ~] es una rampa continua de 0 a 1 Es como un diente de sierra con la mitad de la amplitud y un desplazamiento. El objeto [cos ~] multiplica su entrada por 2pi y da el coseno del resultado. Alimentar un [fasor ~] en [cos ~] da como resultado el coseno de una rampa ascendente que va de 0 a 2pi (o un ángulo de círculo en constante aumento) \, que es esencialmente una onda sinusoidal.;
#X text 507 11 Todavía hay otra forma de construir este oscilador usando los objetos [expr ~] y [value]. Aquí necesitaremos la abstracción [pi] \, que calcula el número pi (si no tiene eso \, envíe 1 a [atan] y multiplique esto por 4). Lo multiplicaremos por dos y lo almacenaremos en [valor]. [valor] es una variable global y toma un nombre para un argumento. Cualquier objeto [value] con el mismo nombre tendrá el mismo valor. El objeto [expr ~] puede usar variables de [valor] \, por lo que el parche de abajo en realidad dará un oscilador coseno \, al igual que el parche de arriba. Sin embargo \, esto consume más CPU y se considera que es más lento que [cos ~] (tal vez me equivoque aquí ...) \, pero es bueno saberlo para que podamos familiarizarnos más con la forma en que funcionan los osciladores en Pd.;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 4 0 3 0;
#X connect 5 0 4 0;
#X connect 6 0 1 0;
#X connect 8 0 18 0;
#X connect 9 0 13 0;
#X connect 10 0 9 0;
#X connect 11 0 8 0;
#X connect 14 0 16 0;
#X connect 15 0 14 0;
#X connect 16 0 20 0;
#X connect 18 0 13 0;
#X connect 19 0 14 0;
#X connect 20 0 17 0;
