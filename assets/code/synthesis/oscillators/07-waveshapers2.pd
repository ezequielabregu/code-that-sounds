#N canvas 186 25 1169 698 12;
#X text 690 17 El oscilador triangular es \, fuera de los osciladores estándar \, el más complejo de construir. Estamos basados en [phasor ~] \, que es una rampa ascendente de 0 a 1 Para sacar un triángulo de esta forma \, necesitaremos hacer algunos ajustes. Primero necesitaremos una copia de [fasor ~] con una dirección invertida. Para obtener esto \, tendremos que multiplicar [phasor ~] por -1 \, por lo que ahora la rampa irá de 0 a -1 Luego necesitaremos agregar 1 \, así que ahora la rampa va de 1 a 0;
#X text 688 147 Ahora tenemos la copia con la dirección invertida. Si enviamos tanto el [fasor ~] como su copia invertida a [min ~] \, obtenemos un triángulo que va de 0 a 0.5. [min ~] tomará dos valores de entrada y generará el más pequeño. Enviándole una rampa ascendente y descendente \, durante la mitad del período generará la rampa ascendente (al principio [fasor ~] está en 0 y la copia invertida en 1) \, y para la otra mitad la descendente. Como ambos se encuentran en 0.5 \, nuestro triángulo tendrá un lapso de 0.5.;
#X obj 693 318 phasor~;
#X floatatom 693 293 5 0 0 0 - - - 0;
#X obj 754 402 metro 100;
#X obj 757 380 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 1069 611 loadbang;
#X msg 1069 635 \; pd dsp 1;
#X obj 693 440 tabwrite~ triangle;
#N canvas 0 22 450 278 (subpatch) 0;
#X array triangle 400 float 1;
#A 0 -0.0453558 -0.109755 -0.174154 -0.238553 -0.302952 -0.367351 -0.43175 -0.496149 -0.560549 -0.624948 -0.689347 -0.753746 -0.818145 -0.882544 -0.946943 -0.988658 -0.924259 -0.85986 -0.795461 -0.731061 -0.666662 -0.602263 -0.537864 -0.473465 -0.409066 -0.344667 -0.280268 -0.215869 -0.15147 -0.0870706 -0.0226715 0.0417277 0.106127 0.170526 0.234925 0.299324 0.363723 0.428122 0.492521 0.55692 0.62132 0.685719 0.750118 0.814517 0.878916 0.943315 0.992286 0.927887 0.863488 0.799089 0.73469 0.67029 0.605891 0.541492 0.477093 0.412694 0.348295 0.283896 0.219497 0.155098 0.0906987 0.0262995 -0.0380995 -0.102499 -0.166898 -0.231297 -0.295696 -0.360095 -0.424494 -0.488893 -0.553292 -0.617691 -0.682091 -0.74649 -0.810889 -0.875288 -0.939687 -0.995914 -0.931515 -0.867116 -0.802717 -0.738318 -0.673919 -0.609519 -0.54512 -0.480721 -0.416322 -0.351923 -0.287524 -0.223125 -0.158726 -0.0943267 -0.0299277 0.0344714 0.0988705 0.16327 0.227669 0.292068 0.356467 0.420866 0.485265 0.549664 0.614063 0.678462 0.742862 0.807261 0.87166 0.936059 0.999542 0.935143 0.870744 0.806345 0.741946 0.677547 0.613148 0.548748 0.484349 0.41995 0.355551 0.291152 0.226753 0.162354 0.0979548 0.0335557 -0.0308433 -0.0952425 -0.159642 -0.224041 -0.28844 -0.352839 -0.417238 -0.481637 -0.546036 -0.610435 -0.674834 -0.739233 -0.803632 -0.868032 -0.932431 -0.99683 -0.938771 -0.874372 -0.809973 -0.745574 -0.681175 -0.616776 -0.552377 -0.487978 -0.423578 -0.359179 -0.29478 -0.230381 -0.165982 -0.101583 -0.0371839 0.0272152 0.0916142 0.156013 0.220412 0.284812 0.349211 0.41361 0.478009 0.542408 0.606807 0.671206 0.735605 0.800004 0.864403 0.928802 0.993202 0.942399 0.878 0.813601 0.749202 0.684803 0.620404 0.556005 0.491606 0.427207 0.362808 0.298408 0.234009 0.16961 0.105211 0.040812 -0.0235872 -0.0879862 -0.152385 -0.216784 -0.281183 -0.345582 -0.409982 -0.474381 -0.53878 -0.603179 -0.667578 -0.731977 -0.796376 -0.860775 -0.925174 -0.989573 -0.946027 -0.881628 -0.817229 -0.75283 -0.688431 -0.624032 -0.559633 -0.495234 -0.430835 -0.366436 -0.302036 -0.237637 -0.173238 -0.108839 -0.0444401 0.019959 0.0843581 0.148757 0.213156 0.277555 0.341954 0.406354 0.470753 0.535152 0.599551 0.66395 0.728349 0.792748 0.857147 0.921546 0.985945 0.949656 0.885256 0.820857 0.756458 0.692059 0.62766 0.563261 0.498862 0.434463 0.370064 0.305665 0.241266 0.176866 0.112467 0.0480683 -0.016331 -0.08073 -0.145129 -0.209528 -0.273927 -0.338326 -0.402725 -0.467124 -0.531524 -0.595923 -0.660322 -0.724721 -0.78912 -0.853519 -0.917918 -0.982317 -0.953284 -0.888885 -0.824485 -0.760086 -0.695687 -0.631288 -0.566889 -0.50249 -0.438091 -0.373692 -0.309293 -0.244894 -0.180494 -0.116095 -0.0516963 0.0127028 0.0771019 0.141501 0.2059 0.270299 0.334698 0.399097 0.463496 0.527896 0.592295 0.656694 0.721093 0.785492 0.849891 0.91429 0.978689 0.956912 0.892513 0.828114 0.763714 0.699315 0.634916 0.570517 0.506118 0.441719 0.37732 0.312921 0.248522 0.184123 0.119724 0.0553243 -0.00907469 -0.0734737 -0.137873 -0.202272 -0.266671 -0.33107 -0.395469 -0.459868 -0.524267 -0.588666 -0.653066 -0.717465 -0.781864 -0.846263 -0.910662 -0.975061 -0.96054 -0.896141 -0.831742 -0.767343 -0.702943 -0.638544 -0.574145 -0.509746 -0.445347 -0.380948 -0.316549 -0.25215 -0.187751 -0.123352 -0.0589525 0.00544655 0.0698457 0.134245 0.198644 0.263043 0.327442 0.391841 0.45624 0.520639 0.585038 0.649438 0.713837 0.778236 0.842635 0.907034 0.971433 0.964168 0.899769 0.83537 0.770971 0.706572 0.642172 0.577773 0.513374 0.448975 0.384576 0.320177 0.255778 0.191379 0.12698 0.0625806 -0.00181842 -0.0662177 -0.130617 -0.195016 -0.259415 -0.323814 -0.388213 -0.452612 -0.517011 -0.58141 -0.645809 -0.710208 -0.774608 -0.839007 -0.903406 -0.967805 -0.967796 -0.903397 -0.838998 -0.774599 -0.7102 -0.645801 -0.581401 -0.517002 -0.452603 -0.388204 -0.323805 -0.259406;
#X coords 0 1 399 -1 200 140 1;
#X restore 695 497 graph;
#X obj 693 347 expr~ ((if ($v1 < 0.5 \, $v1 \, 1 - $v1 ))-.25)*4;
#X text 26 15 La forma de onda del diente de sierra es probablemente la más sencilla de obtener ya que [phasor ~] es un diente de sierra con la mitad de la amplitud del oscilador. Entonces \, multiplicar [fasor ~] por 2 nos dará la amplitud correcta de un oscilador de diente de sierra \, con un desplazamiento. Restar 1 establecerá nuestro oscilador en el rango correcto (-1 a 1);
#X obj 30 157 phasor~;
#X floatatom 30 133 5 0 0 0 - - - 0;
#X obj 91 244 metro 100;
#X obj 91 222 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#N canvas 0 22 450 278 (subpatch) 0;
#X array saw 400 float 1;
#A 0 -0.243463 -0.220243 -0.197023 -0.173803 -0.150583 -0.127363 -0.104143 -0.080923 -0.057703 -0.0344831 -0.0112631 0.0119568 0.0351768 0.0583967 0.0816168 0.104837 0.128057 0.151277 0.174497 0.197716 0.220936 0.244156 0.267376 0.290596 0.313816 0.337036 0.360256 0.383476 0.406696 0.429916 0.453136 0.476356 0.499576 0.522796 0.546016 0.569236 0.592456 0.615676 0.638896 0.662116 0.685336 0.708555 0.731775 0.754995 0.778215 0.801435 0.824655 0.847875 0.871095 0.894315 0.917535 0.940755 0.963975 0.987195 -0.989585 -0.966365 -0.943145 -0.919925 -0.896705 -0.873485 -0.850265 -0.827045 -0.803825 -0.780606 -0.757386 -0.734166 -0.710946 -0.687726 -0.664506 -0.641286 -0.618066 -0.594846 -0.571626 -0.548406 -0.525186 -0.501966 -0.478746 -0.455526 -0.432306 -0.409086 -0.385866 -0.362646 -0.339426 -0.316206 -0.292987 -0.269767 -0.246547 -0.223327 -0.200107 -0.176887 -0.153667 -0.130447 -0.107227 -0.0840069 -0.060787 -0.037567 -0.0143471 0.00887287 0.0320928 0.0553129 0.0785328 0.101753 0.124973 0.148193 0.171413 0.194633 0.217852 0.241072 0.264292 0.287512 0.310732 0.333952 0.357172 0.380392 0.403612 0.426832 0.450052 0.473272 0.496492 0.519712 0.542932 0.566152 0.589372 0.612592 0.635812 0.659032 0.682252 0.705472 0.728691 0.751911 0.775131 0.798351 0.821571 0.844791 0.868011 0.891231 0.914451 0.937671 0.960891 0.984111 -0.992669 -0.969449 -0.946229 -0.923009 -0.899789 -0.876569 -0.853349 -0.830129 -0.806909 -0.783689 -0.76047 -0.73725 -0.71403 -0.69081 -0.66759 -0.64437 -0.62115 -0.59793 -0.57471 -0.55149 -0.52827 -0.50505 -0.48183 -0.45861 -0.43539 -0.41217 -0.38895 -0.36573 -0.34251 -0.31929 -0.29607 -0.27285 -0.249631 -0.226411 -0.203191 -0.179971 -0.156751 -0.133531 -0.110311 -0.0870908 -0.0638709 -0.040651 -0.017431 0.00578892 0.0290089 0.0522289 0.0754489 0.0986688 0.121889 0.145109 0.168329 0.191549 0.214769 0.237988 0.261208 0.284428 0.307648 0.330868 0.354088 0.377308 0.400528 0.423748 0.446968 0.470188 0.493408 0.516628 0.539848 0.563068 0.586288 0.609508 0.632728 0.655948 0.679168 0.702388 0.725608 0.748827 0.772048 0.795267 0.818487 0.841707 0.864927 0.888147 0.911367 0.934587 0.957807 0.981027 -0.995753 -0.972533 -0.949313 -0.926093 -0.902873 -0.879653 -0.856433 -0.833213 -0.809993 -0.786773 -0.763553 -0.740333 -0.717114 -0.693894 -0.670674 -0.647454 -0.624234 -0.601014 -0.577794 -0.554574 -0.531354 -0.508134 -0.484914 -0.461694 -0.438474 -0.415254 -0.392034 -0.368814 -0.345594 -0.322374 -0.299154 -0.275934 -0.252714 -0.229495 -0.206275 -0.183055 -0.159835 -0.136615 -0.113395 -0.0901748 -0.0669549 -0.0437348 -0.0205149 0.00270498 0.025925 0.049145 0.0723649 0.0955849 0.118805 0.142025 0.165245 0.188465 0.211685 0.234905 0.258125 0.281345 0.304564 0.327784 0.351004 0.374224 0.397444 0.420664 0.443884 0.467104 0.490324 0.513544 0.536764 0.559984 0.583204 0.606424 0.629644 0.652864 0.676084 0.699304 0.722524 0.745744 0.768964 0.792184 0.815403 0.838623 0.861843 0.885063 0.908283 0.931503 0.954723 0.977943 -0.998837 -0.975617 -0.952397 -0.929177 -0.905957 -0.882737 -0.859517 -0.836297 -0.813077 -0.789857 -0.766637 -0.743417 -0.720197 -0.696977 -0.673758 -0.650538 -0.627318 -0.604098 -0.580878 -0.557658 -0.534438 -0.511218 -0.487998 -0.464778 -0.441558 -0.418338 -0.395118 -0.371898 -0.348678 -0.325458 -0.302238 -0.279018 -0.255798 -0.232578 -0.209359 -0.186139 -0.162919 -0.139699 -0.116479 -0.0932587 -0.0700388 -0.0468188 -0.0235988 -0.000378907 0.0228411 0.046061 0.069281 0.0925009 0.115721 0.138941 0.162161 0.185381 0.208601 0.231821 0.255041 0.278261 0.301481 0.3247 0.34792 0.37114 0.39436 0.41758 0.4408 0.46402 0.48724 0.51046 0.53368 0.5569 0.58012 0.60334 0.62656 0.64978 0.673 0.69622 0.71944 0.74266 0.76588 0.7891 0.81232 0.835539 0.858759 0.881979 0.905199 0.928419 0.951639 0.974859 0.998079 -0.978701;
#X coords 0 1 399 -1 200 140 1 0 0;
#X restore 222 155 graph;
#X obj 30 282 tabwrite~ saw;
#X obj 30 189 expr~ ($v1 * 2) - 1;
#X text 12 343 Para construir un oscilador de onda cuadrada necesitar puede usar [expr ~] \, que está incluido en Pd vanilla \, pero [> ~] es más rápido y requiere menos CPU. Un oscilador de onda cuadrada es 1 o -1 \, cambiando entre los dos valores. Lo que hace [> ~] es que recibe una señal y la compara con su argumento (o con una señal enviada a su entrada derecha). Su salida es un 1 si la señal entrante es mayor que su argumento y un 0 si es menor. Establecer 0.5 como argumento para [> ~] generará un 0 para la mitad del período del [fasor ~] y un 1 para la otra mitad.;
#X obj 24 527 phasor~;
#X floatatom 24 503 5 0 0 0 - - - 0;
#X obj 85 614 metro 100;
#X obj 85 592 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#N canvas 0 22 450 278 (subpatch) 0;
#X array square 400 float 1;
#A 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1;
#X coords 0 1.1 399 -1.1 200 140 1 0 0;
#X restore 231 531 graph;
#X obj 24 559 expr~ if ($v1 < 0.5 \, -1 \, 1);
#X obj 24 652 tabwrite~ square;
#X connect 2 0 10 0;
#X connect 3 0 2 0;
#X connect 4 0 8 0;
#X connect 5 0 4 0;
#X connect 6 0 7 0;
#X connect 10 0 8 0;
#X connect 12 0 18 0;
#X connect 13 0 12 0;
#X connect 14 0 17 0;
#X connect 15 0 14 0;
#X connect 18 0 17 0;
#X connect 20 0 25 0;
#X connect 21 0 20 0;
#X connect 22 0 26 0;
#X connect 23 0 22 0;
#X connect 25 0 26 0;
