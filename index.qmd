![](/assets/images/index/cover-5.png){width="50%"}

# Preface {.unnumbered}

This book was born out of the classroom—but it does not stay there. It is the result of years of teaching creative coding and interactive media at public universities, engaging with students from a wide range of disciplines, backgrounds, and interests. Over time, a common thread emerged: the desire to bridge artistic expression and technical skill, to write code not just as a means to an end, but as a space of exploration, experimentation, and play.

In these pages, you’ll find the distilled insights, exercises, and creative strategies that have shaped countless workshops and academic programs. The goal has always been twofold: to equip readers with the tools to build interactive digital systems, and to nurture a mindset where sound, movement, code, and structure can be explored as artistic materials. Whether it's a generative soundscape, a data-driven artwork, or a custom tool built from scratch, the projects in this book are designed to foster technical growth while encouraging individual expression.

This is not a manual in the traditional sense, nor is it a fixed curriculum. Instead, this book invites you to engage with Pure Data on your own terms, navigating its chapters in whatever order best suits your curiosity. The modular structure is intentional: it supports creative detours, sudden insights, and unexpected connections between ideas. You are encouraged to experiment, remix, and stretch the boundaries of the examples presented. Treat the book as both a guide and a sandbox—one where art, sound, code, and interactivity come alive through your engagement.

Whether you're an artist exploring new tools, a programmer seeking creative outlets, or a student diving into the world of interactive media, I hope this book helps you discover how code can become a language for imagination.

## Who am I?

My name is **Ezequiel Abregú**, and I am a sound artist, composer, multi-instrumentalist, and researcher originally from Buenos Aires, Argentina. My artistic practice encompasses sound recordings, audio installations, performances, sound sculptures, sound design, and compositions for chamber music, choreography, and theater. I am particularly interested in the interplay between music, performance, sound art, live electronics, auditory and visual perception, interactive media, and the application of technology in art.

::: {style="text-align:center;"}
![Dr. Ezequiel Abregú](/assets/images/index/eabregu-pic.jpg){width="70%"}
:::

I hold a Ph.D. focusing on the relationship between visual and auditory perception in sound art, and a degree in Composition with Electroacoustic Media from the National University of Quilmes (UNQ). My academic career includes teaching positions at several institutions: I am a professor at the University of Quilmes (Computing Applied to Music area), the National University of Arts (Multimedia Arts area), and the University of Tres de Febrero (Electronic Arts area).

My passion for programming and digital audio applications has led me to explore various programming languages and tools over the past two decades, including C, C++, Python, and Pure Data. I am an advocate of the open-source philosophy, regularly working with Linux and sharing my projects in publicly accessible repositories. My technical expertise extends to hardware development using microcontrollers and single-board computers, enabling me to adopt a hands-on approach in both my artistic and research endeavors.

::: {.callout-note appearance="minimal"}
More information about my work can be found on my personal website [ezequielabregu.net](https://ezequielabregu.net)
:::

## What is this book about?

The goal of this book is to support undergraduate and postgraduate students in exploring the intersection of creativity and technology alongside peers from diverse backgrounds. Building on years of teaching experience at several public universities[^1], this work encourages the integration of a creative mindset with programming skills to design original tools, algorithms, and artworks. Through this synthesis, the book invites students to engage with sound, interactivity, and control protocols in both technical and expressive dimensions.

[^1]: [Multimedia Arts UNA](https://multimedia.una.edu.ar/), [Electronic Arts UNTREF](https://untref.edu.ar/carrera/artes-electronicas), [Bachelor of Music and Technology UNQ](https://euda.unq.edu.ar/), [Master's Degree in Sound Art UNQ](https://www.unq.edu.ar/carrera/91-maestria-en-arte-sonoro/), [Doctorate in Arts UNA](https://una.edu.ar/carreras/doctorado-en-artes_16702)

Rather than offering a fixed, linear progression, the structure of this book is deliberately open and modular. Readers are encouraged to navigate the content according to their interests, needs, or curiosity. This flexibility supports an experimental approach to learning, where exploration and play are not only welcome but essential.

By approaching programming as a creative practice, this book invites you to think, make, and reflect through code. Whether you're building an interactive sound installation, prototyping a digital instrument, or simply experimenting with new ideas, the goal is to empower you with the tools and concepts to express yourself in the digital domain—and to enjoy the process along the way.

## Why *Code That Sounds*?

The title may appear straightforward at first, but upon deeper reflection, it reveals a rich conceptual landscape that frames the entire approach of this book. More than a literal description of code that produces audio, it invites us to consider the interplay between computation, perception, and artistic expression. In this book, we explore how code becomes a medium for crafting sonic experiences—how it can be shaped, composed, and performed to produce not only functional systems, but also resonant and meaningful works of art.

At the most immediate level, the phrase refers to the act of writing code that generates sound. Whether synthesizing a sine wave, constructing a step sequencer, or routing audio signals in real time, we are engaging with code as a tool for sonic creation. Tools like Pure Data make this direct connection between programming and audio particularly tangible: the act of connecting objects, defining behaviors, and mapping parameters becomes inseparable from the process of producing audible outcomes. In this sense, *Code That Sounds* expresses the essential relationship between the logical structure of algorithms and the materiality of sound.

Yet the phrase also invites a more poetic interpretation. "Sounds," in English, can refer not only to audio but also to the way something resonates intellectually or emotionally. Code, then, is not merely a set of instructions—it is a language with its own voice, rhythm, and character. A piece of code can "sound right" in the same way that a musical phrase does. This expressive quality of code becomes especially relevant in the context of creative practice. As we will see throughout the book, the aesthetic choices embedded in code—its structure, logic, timing, and responsiveness—are as crucial as the sounds it ultimately produces. In this light, the act of programming becomes a compositional gesture, where syntax and semantics coalesce into a form of audible thinking.

This perspective positions code as a bridge between traditionally separate domains: between the analytical and the intuitive, the procedural and the performative, the technical and the poetic. Sound has long been associated with music, art, and embodiment; code, with abstraction and logic. But when we write *Code That Sounds*, we dissolve these boundaries. We begin to treat code not as a rigid mechanism, but as a generative medium—capable of producing form, emotion, and experience. The phrase thus embodies the interdisciplinary ethos that guides this book, where creative coding is not merely about mastering a tool, but about exploring how different ways of knowing and making converge through sound.

There is also a sense of agency embedded in the phrase. This is not just code that happens to produce sound—it is code that is designed to sound. The use of the active verb implies intention, purpose, and dynamism. It reminds us that the systems we build are not passive containers for sound, but active participants in shaping it. In interactive contexts especially, where the code responds to movement, sensors, or user input, the sounding becomes an emergent property of a living system. Here, the code is not simply a means to an end—it is the co-author of a sonic event.

*Code That Sounds* gestures toward a methodology rooted in exploration and discovery. It encourages us to treat code as something to be listened to, not just debugged. What does a patch “sound like” when put into motion? What happens when you tweak a parameter or rewire a signal path? This book invites you to approach creative coding as a space of experimentation—where understanding emerges through making, and insight through listening. We embrace this attitude by providing examples, sketches, and exercises that are meant not to be followed blindly, but to be remixed, transformed, and extended.

*Code That Sounds* captures the spirit of this book: it is about making sound with code, but also about listening to the voice of code itself. It is about finding resonance between systems and sensations, and about using programming as a medium for creative exploration. As you work through the following chapters, we encourage you to tune your ears not only to the sounds that emerge, but to the ideas, questions, and possibilities that those sounds carry with them. This is not just about learning how to code—this is about learning how to listen to what code can become.

## From Problem to Algorithm

One of the central ideas guiding this book is that programming begins not with a tool, but with a question. Before we concern ourselves with implementation, with lines of code or patching wires in Pure Data, we start by identifying a problem—something that needs to be understood, shaped, or transformed. This problem might be technical (how to generate a rhythm evenly distributed over time?), perceptual (how to spatialize a sound to suggest motion?), or poetic (how to evoke a sense of disorientation through modulation?). Each chapter begins with such a prompt, inviting us to investigate the mechanics and metaphors behind the systems we aim to build.

From this point, the process becomes analytical and compositional. We break down the problem into its smallest components, identify the parameters and constraints at play, and explore the structures—logical, mathematical, sonic—that underpin it. This leads us to design an algorithm: a set of steps, a conceptual model, or a generative rule that connects the problem to a potential solution. The algorithm is not just a procedure—it is a form of reasoning, a translation of intuition into system.

Only once this conceptual groundwork has been laid do we turn to implementation. The choice of environment—Pure Data, in our case—becomes relevant, but always in service of the larger question. It is not simply learning how to use a tool; you are using the tool to articulate a thought. This means thinking through code, not just writing it. It means seeing your patch not as an end, but as a hypothesis, a sketch, an evolving structure open to revision.

Throughout the book, I invite you to cultivate this mindset. When studying an example patch, don’t ask only what it does—ask how it solves a problem. What are the assumptions embedded in its logic? Could the same result be achieved differently? What happens if you modify the rules, invert the process, or apply the algorithm in another context? 

By working in this way, programming becomes more than an exercise in execution. It becomes a space of inquiry and invention—an extension of your thinking, your listening, your compositional practice.

## Who is this book for?

This book is for anyone drawn to the idea that code can become an expressive, sonic, and artistic material. It is designed for students, artists, educators, and curious minds—regardless of their technical background—who wish to explore programming as a medium for crafting sound, interactivity, and performance. Whether you're new to creative coding or already familiar with digital media, this book will guide you through approaches that treat code as more than just a set of instructions. Here, programming becomes a form of listening, composing, and experimenting. Pure Data serves as our primary environment, but our focus lies in cultivating a creative and critical practice with sound and code at its core.

## What are you going to learn?

Throughout this book, you will learn how to develop and shape sonic experiences using code. You will build interactive systems in Pure Data that respond, transform, and sound—systems that move beyond the screen and into space, time, and perception. Along the way, you will engage with fundamental techniques of sound synthesis, algorithmic thinking, and generative design, all within a context that values exploration, composition, and artistic intent. Beyond tools and syntax, you will learn to listen to your code, to let it surprise you, and to use it as a means for creative discovery and auditory expression.

## What are you not going to learn?

This book does not attempt to provide exhaustive coverage of Pure Data or its many technical details. It is not a manual or reference guide. Rather than aiming for completeness, we prioritize depth over breadth: we focus on specific concepts, practices, and case studies that support an artistic and experimental approach. You won’t find here every object or external library documented, nor step-by-step instructions for GUI design or audio engineering. Instead, you will find a flexible, hands-on framework to begin crafting systems that sound, and from there, make them your own. This book works best in dialogue with other resources—especially the official Pure Data documentation—and invites you to learn by making, remixing, and listening.

## A Work in Progress

Before we delve deeper into the subject, let it be clear from the outset: 

::: {style="text-align:center;"}
> **This book is, by design, a work in progress.**
:::

The intention is not to present a definitive compendium or a closed collection of recipes. Instead, what I offer here is a growing body of materials, case studies, and conceptual tools that evolve in parallel with the creative and technical challenges faced by artists and researchers working at the intersection of code, sound, and interactivity. The choice of Pure Data as the primary platform reflects both its openness and its suitability for rapid prototyping and conceptual clarity. But beyond that, this book aims to serve as a *framework for thinking*, not just for coding.

## Backend First: Leaving the GUI for Later

Another important methodological decision in this book is our emphasis on the **backend**. We begin by focusing on signal flow, algorithmic thinking, and control structures—those components that shape the inner workings of a patch. In many cases, the graphical interface (GUI) can be a distraction from the deeper mechanics at play.

By concentrating first on backend logic, we build a strong foundation that can later support more refined user interactions. GUI design will certainly be addressed, but in future chapters, when we are equipped with a clearer understanding of how our systems behave and how we want them to evolve. In other words, we treat the visual layer as a representation of logic, not a replacement for it.

This book is an invitation to approach creative coding not as a set of shortcuts or pre-made solutions, but as a *process of inquiry*. We will get our hands dirty, make mistakes, and revise along the way. In doing so, we learn not just how to build systems, but how to think with and through them. That is the deeper promise of creative code.

## Contributing

If you would like to contribute to this book, please feel free to fork the repository and submit a pull request. I welcome any suggestions, corrections, or improvements to the content. You can also report issues or request features by opening an issue in the repository. You can find the source code for this book on [GitHub](https://github.com/ezequielabregu/code-that-sounds).

::: {.callout-note appearance="default"}
Do not write me emails with questions about PD.  

Please, if you have questions about PD, post them on the [Pure Data forum](https://forum.pdpatchrepo.info/), the [Pd mailing lists](https://lists.iem.at/postorius/lists/), or the [Facebook PD Group](https://www.facebook.com/groups/4729684494).
:::

## Contact

If you have any questions, comments, or feedback about this book, please feel free to reach out to me at [eabregu.dev@gmail.com](mailto:eabregu.dev@gmail.com). I would love to hear from you!

## Acknowledgements

I would like to express my gratitude to the following individuals and organizations for their support and contributions to this book:

-   [Pure Data](https://puredata.info/) for providing a powerful and flexible platform for creative coding.
-   [The Pd community](https://puredata.info/community) for their invaluable resources, tutorials, and support.
-   [The open-source community](https://opensource.org/) for their dedication to sharing knowledge and tools for creative coding.

## License

This book is licensed under the [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License](https://creativecommons.org/licenses/by-nc-sa/4.0/). You are free to share and adapt the material, provided you give appropriate credit, do not use it for commercial purposes, and distribute your contributions under the same license.